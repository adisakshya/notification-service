# Make deployment in desired environment
---
## ToDo
# Check if the docker-image exists locally/dockerhub
# - name: Check if docker-image exists on dockerhub
#   docker_image:
#     name: '{{ api_image_name }}:{{ tag }}'
#     source: pull

# Validate K8s deployment file and fail on errors
- name: Validate deployment file
  k8s:
    kubeconfig: '{{ k8s_kubeconfig }}'
    state: present
    definition: "{{ lookup('template', '../kubernetes/local-deployment.yml') }}"
    validate:
      fail_on_error: yes

# Validate K8s service file and fail on errors
- name: Validate service file
  k8s:
    kubeconfig: '{{ k8s_kubeconfig }}'
    state: present
    definition: "{{ lookup('template', '../kubernetes/service.yml') }}"
    validate:
      fail_on_error: yes

# Create deployment or patch an existing deployment
- name: Create deployment
  k8s:
    definition: "{{ lookup('template', '../kubernetes/local-deployment.yml') }}"
    kubeconfig: '{{ k8s_kubeconfig }}'
    state: present

## ToDo
# - name: Check if the deployment is ready
  # k8s_info:
  #   kubeconfig: '{{ k8s_kubeconfig }}'
  #   kind: Deployment
  #   label_selectors: 
  #     - app = dev-reminder-service
  # register: output_info
  # until: output_info.resources | json_query('[*].status.conditions[?reason==`NewReplicaSetAvailable`][].status') | select ('match','True') | list | length == 1
  # delay: 2
  # retries: 5

# Create service or patch an existing service
- name: Create service
  k8s:
    definition: "{{ lookup('template', '../kubernetes/service.yml') }}"
    kubeconfig: '{{ k8s_kubeconfig }}'
    state: present
  register: reminder_service

## ToDo
# - name: Check if the service is ready
#   k8s_info:
#     kubeconfig: '{{ k8s_kubeconfig }}'
#     kind: Service
#     label_selectors: 
#       - app = dev-reminder-service
#   register: output_info
#   until: output_info.resources | json_query('[*].status.conditions[?reason==`NewReplicaSetAvailable`][].status') | select ('match','True') | list | length == 1
#   delay: 2
#   retries: 5
...
