language: python

services:
  - docker
addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

env:
  global:
    - IMAGE_NAME=notification-service

stages:
  - build
  - name: push-dev-docker-image
    if: branch = development AND type = push AND fork = false
  - name: push-prod-docker-image
    if: branch = production AND type = push AND fork = false
  - name: deploy
    if: (branch = development OR branch = production) AND type = push AND fork = false

install:
  # Install NodeJS and Yarn
  - nvm install 12.17.0
  - npm install -g yarn

before_script:
  # Move to source directory
  - cd src
  # Versioning
  - VERSION="$(awk '$2 == "NOTIFICATION_SERVICE_VERSION" { print $3; exit }' Dockerfile)"

jobs:
  include:
    - stage: build
      name: "Build and Test"
      script:
        # Install dependencies
        - yarn install
        # Build source
        - yarn build
        # Run tests
        - yarn test --passWithNoTests
    - stage: push-dev-docker-image
      name: "Push development docker image to Docker Hub"
      script:
        # Install dependencies
        - yarn install
        # Build source
        - yarn build
        # Build docker image
        - docker build -t $IMAGE_NAME .
        # List docker images
        - docker images
        # Push dev-docker image to dockerhub
        - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
        - docker tag $IMAGE_NAME:latest $DOCKER_USER/$IMAGE_NAME:$VERSION-dev
        - docker push $DOCKER_USER/$IMAGE_NAME:$VERSION-dev
    - stage: push-prod-docker-image
      name: "Push production docker image to Docker Hub"
      script:
        # Install dependencies
        - yarn install
        # Build source
        - yarn build
        # Build docker image
        - docker build -t $IMAGE_NAME .
        # List docker images
        - docker images
        # Push prod-docker image to dockerhub
        - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
        - docker tag $IMAGE_NAME:latest $DOCKER_USER/$IMAGE_NAME:$VERSION-prod
        - docker tag $IMAGE_NAME:latest $DOCKER_USER/$IMAGE_NAME:latest
        - docker push $DOCKER_USER/$IMAGE_NAME:latest
        - docker push $DOCKER_USER/$IMAGE_NAME:$VERSION-prod
    - stage: deploy
      name: "Deploy service to Kubernetes"
      script:
        # Debug
        - which python
        # Move to the project root directory
        - cd ..
        # Initialize Kubeconfig
        - sed -i -e 's|K8S_CA_CERT|'"${K8S_CA_CERT}"'|g' .travis/ansible/config/kubeconfig
        - sed -i -e 's|K8S_ENDPOINT|'"${K8S_ENDPOINT}"'|g' .travis/ansible/config/kubeconfig
        - sed -i -e 's|K8S_ADMIN_CERT|'"${K8S_ADMIN_CERT}"'|g' .travis/ansible/config/kubeconfig
        - sed -i -e 's|K8S_ADMIN_KEY|'"${K8S_ADMIN_KEY}"'|g' .travis/ansible/config/kubeconfig
        - sed -i -e 's|K8S_USER_NAME|'"${K8S_USER_NAME}"'|g' .travis/ansible/config/kubeconfig
        - sed -i -e 's|K8S_CLUSTER_NAME|'"${K8S_CLUSTER_NAME}"'|g' .travis/ansible/config/kubeconfig
        # Install dependencies
        - python -m pip install -r requirements.txt --upgrade
        # List installed packages
        - python -m pip list
        # Confirm presence of ansible
        - ansible-playbook --version
        # Run master playbook
        - cd .travis/ansible
        - ansible-playbook site.yml -i config/hosts.yml --extra-vars "env=$TRAVIS_BRANCH version=$VERSION deployment_type=$TRAVIS_BRANCH" -vvv

notifications:
  email: false
  slack:
    rooms:
      secure: MK4Og2E2CHnEX0uyLoHhNiMBVeNpXwXayp5yt8Z9Ylywd5C5i+IBs0OASNUQmLvwPgZNDdipEnEqweb/L2eawZflA4pD3uogugDQSb/lLAiIFNTgkmqNve9rE3m8s8ADfMSPcp52GgfsGYwAPzmrp1bpTTNKB3Ov6pHbp5XxkzAvlXP6PKPTXhlQ6H+PIPqK9o0iUzH+tSZ4j5quaRn7La5wxrI0w+xLZ5h80I+UhDgu5XD04o6EP3VXwnNjSjQ9FoR+Ii2iORyMIptKdD+SPxn1/p8BLhsUAZo7srPwiwHvcF2weCOobq4t9DhxI03efjD+w3F6sIN4RY7p/r+KFHA57UK0Efcu+0uKeTQ6ln/8l6HFT52CrueCPJs9QxG+zXJh9MEo9/82XwapGxqsJaAB7hzLiEQ5UPfTlWOiMhJytmEz3QFdh1Xlnc9/kD5/8vrOssJNJX1ecJomXfNQatnlurNxByqJ67zBJuVhycTJ9nty5JzEuMTRq3fRN3CfXCddGTjOldYnylnRpH1hbRerTeW95yvXlNvcg6zyPbsPaAfwGTBlAwfJoMG1Vini7R9LF+d2hmpki5L5dMrTzRtfTXm6UGPc/QXZrnyzWI3+0XuUsrIHo4g3IqG0ykx1wJeAW93hWRZ8+ktzC16Ztztl0DpekcMLXjkSWXS4Z0o=
    template:
      - "`%{repository_slug}` \n*%{result}* build (<%{build_url}|#%{build_number}>) by %{author} for commit (<%{compare_url}|%{commit}>) on branch `%{branch}`."
      - "Duration: *%{duration}*"
      - "Message: %{message}"
